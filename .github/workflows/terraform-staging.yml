# This is a basic workflow to provision our QA environment using Terraform in CI/CD

name: Staging Infra Provisioning with Terraform

# Controls when the workflow will run
on:
    # Triggers the workflow on push or pull request events but only for the "main" branch 
    # push: 
    #     branches: [ "main" ]
    # pull_request:
    #     branches: [ "main" ]
    
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# AWS Credentials for our build & deployment (Service Account User Credential)
env: 
    AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
    AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
    AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}

# We want this applied to all jobs
defaults: 
    run:
        shell: bash
        working-directory: "./staging/us-east-2"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs: 
    # This workflow contains a single job called "build"
    tfplan: # this is our own "build" step
      name: Terraform plan
      
      # The type of runner that the job will run on
      runs-on: ubuntu-latest

      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:

          # Checkout our respository under the $GITHUB_WORKSPACE for access 
          - name: Checkout Branch
            uses: actions/checkout@v4

          # Set up Terraform to run our terraform commands
          - name: Set Up Terraform
            uses: hashicorp/setup-terraform@v3

          - name: Terraform Format
            id: fmt
            run: terraform fmt -check
            # continue-on-error: true

          - name: Terraform Init
            id: init
            run: terraform init

          - name: Terraform Validate
            id: validate
            run: terraform validate -no-color
          
          - name: Terraform Plan
            id: plan
            run: terraform plan -no-color
            # continue-on-error: true

          # Add TF Plan Output to PR Comment
          # - uses: actions/github-script@v7
          #   if: github.event_name == 'pull_request'
          #   env:
          #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          #   with:
          #     github-token: ${{ secrets.GITHUB_TOKEN }}
          #     script: |
          #       // 1. Retrieve existing bot comments for the PR
          #       const { data: comments } = await github.rest.issues.listComments({
          #         owner: context.repo.owner,
          #         repo: context.repo.repo,
          #         issue_number: context.issue.number,
          #       })
          #       const botComment = comments.find(comment => {
          #         return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          #       })
          
          #       // 2. Prepare format of the comment
          #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #       <details><summary>Validation Output</summary>
          
          #       \`\`\`\n
          #       ${{ steps.validate.outputs.stdout }}
          #       \`\`\`
          
          #       </details>
          
          #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          #       <details><summary>Show Plan</summary>
          
          #       \`\`\`\n
          #       ${process.env.PLAN}
          #       \`\`\`
          
          #       </details>
          
          #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
          
          #       // 3. If we have a comment, update it, otherwise create a new one
          #       if (botComment) {
          #         github.rest.issues.updateComment({
          #           owner: context.repo.owner,
          #           repo: context.repo.repo,
          #           comment_id: botComment.id,
          #           body: output
          #         })
          #       } else {
          #         github.rest.issues.createComment({
          #           issue_number: context.issue.number,
          #           owner: context.repo.owner,
          #           repo: context.repo.repo,
          #           body: output
          #         })
          #       }

    # Snyk Code Scanning
    terraform-snyk-scan:
      name: Snyk Scan
      needs: tfplan
      runs-on: ubuntu-latest

      # When a security misconfiguration [vulnerability] is detected, the pipeline will break and not move forward until remediated
      steps:
        - uses: actions/checkout@v2
        - name: Scan Terraform Code for security misconfigurations - resolve all 'critical' and 'high' vulnerabilities before merging to 'main'
          uses: snyk/actions/iac@master
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          with:
            file: "./staging/us-east-2"
            args: --severity-threshold=high    # only break pipeline for any 'high' vulnerabilities detected

    # Deploy Step
    tfapply:
      name: Deploy Infrastructure
      needs: terraform-snyk-scan
      runs-on: ubuntu-latest
      environment: 
        name: aws-mgmt

      # Steps representing the sequence of tasks that will be executed as part of the "tfapply" job
      steps: 
          # Checkout our respository under the $GITHUB_WORKSPACE for access 
          - name: Checkout Branch
            uses: actions/checkout@v4

          # Set up Terraform to run our terraform commands
          - name: Set Up Terraform
            uses: hashicorp/setup-terraform@v3

          - name: Terraform Init
            id: init
            run: terraform init

          # Deploy our infrastructure
          - name: Deploy Terraform
            run: terraform apply -auto-approve